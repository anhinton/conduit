% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/module.R
\name{module}
\alias{module}
\title{Create a \code{module} object}
\usage{
module(name, language, host = NULL, description = NULL, inputs = NULL,
  outputs = NULL, sources = NULL, location = getwd())
}
\arguments{
\item{name}{Name of module}

\item{language}{Language name}

\item{host}{Machine on which module is to be run}

\item{description}{A basic description of the module}

\item{inputs}{List of \code{moduleInput} objects}

\item{outputs}{List of \code{moduleOutput} objects}

\item{sources}{List of \code{moduleSource} objects}

\item{location}{file directory where module xml and files are found}
}
\value{
\code{module} list containing:
\itemize{
  \item{name}
  \item{language}
  \item{host}
  \item{description}
  \item{inputs}
  \item{outputs}
  \item{sources}
}
}
\description{
Creates a module object which can be executed in conduit.
}
\details{
\code{inputs}, \code{outputs}, and \code{sources} should be lists
of objects created using \code{moduleInput}, \code{moduleOutput}, and
\code{moduleSource} respectively.

Module \sQuote{location} defaults to current working
directory. This can be set to indicate the location of the module
XML file, and its supporting files.
}
\examples{
## create a module with one output and one source
src1 <- moduleSource(vessel = scriptVessel(value = "x <- \\"set\\""))
outp1 <- moduleOutput(
             name = "x",
             internalVessel(symbol = "x"),
             format = ioFormat("R character string"))
mod1 <- module(name = "setX", language = "R",
               description = "sets the value of x",
               outputs = list(outp1),
               sources = list(src1))

## create a module with one input and one source
mod2 <-
    module(
        "showY",
        language = "R",
        host = "localhost",
        description = "displays the value of Y",
        inputs =
            list(
                moduleInput(
                    name = "y",
                    vessel = internalVessel(symbol = "y"),
                    format = ioFormat("R character string"))),
        sources =
            list(
                moduleSource(
                scriptVessel(value = "print(y)"))))
}
\seealso{
\code{moduleInput}, \code{moduleOutput} and
\code{moduleSource} for creating objects for these
lists. \code{loadModule} for reading a module from an XML
file. \code{saveModule} for saving a module as an XML
file. \code{runModule} for executing a module's source scripts.
}

