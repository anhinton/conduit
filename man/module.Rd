% Generated by roxygen2 (4.0.2): do not edit by hand
\name{module}
\alias{module}
\title{Create a \code{module} object}
\usage{
module(name, platform, description = "", inputs = NULL, outputs = NULL,
  sources = list(), ref = NULL, path = NULL)
}
\arguments{
\item{name}{Name of module}

\item{platform}{Platform name}

\item{description}{A basic description of the module}

\item{inputs}{List of \code{moduleInput} objects}

\item{outputs}{List of \code{moduleOutput} objects}

\item{sources}{List of \code{moduleSource} objects}

\item{path}{Search path(s) for module children (optional)}
}
\value{
\code{module} list containing:
\itemize{
  \item{name}
  \item{platform}
  \item{description}
  \item{inputs}
  \item{outputs}
  \item{sources}
  \item{path}
}
}
\description{
Creates a module object which can be executed in conduit.
}
\details{
\code{inputs}, \code{outputs}, and \code{sources} should be lists
of objects created using \code{moduleInput}, \code{moduleOutput}, and
\code{moduleSource} respectively.

\code{path} optionally specifies search path(s) to be used for any of the
module's children, e.g. a source specified given by sQuote{ref}.
}
\examples{
## create a module with one output and one source
src1 <- moduleSource(value = "x <- \\"set\\"")
outp1 <- moduleOutput(name = "x", type = "internal",
                      format = "R character string")
mod1 <- module(name = "setX", platform = "R",
               description = "sets the value of x",
               outputs = list(outp1),
               sources = list(src1))

## create a module with one input and one source
mod2 <- module("showY", platform = "R",
               description = "displays the value of Y",
               inputs = list(moduleInput(name = "y", type = "internal",
                                         format = "R character string")),
               sources = list(moduleSource(value = "print(y)")))
}
\seealso{
\code{moduleInput}, \code{moduleOutput} and \code{moduleSource} for
creating object for these lists. \code{loadModule} for reading a module
from an XML file. \code{runModule} for executing a module's source
scripts.
}

