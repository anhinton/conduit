% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/pipeline.R
\name{pipeline}
\alias{pipeline}
\title{Create a pipeline}
\usage{
pipeline(name, path = NULL, description = "", components = list(),
  modules = list(), pipelines = list(), pipes = list())
}
\arguments{
\item{name}{\code{pipeline} name}

\item{path}{location of originating pipeline xml file}

\item{description}{\code{pipeline} description}

\item{components}{list of \code{module} and \code{pipeline} objects}

\item{modules}{list of \code{module} objects}

\item{pipelines}{list of \code{pipeline} objects}

\item{pipes}{list of \code{pipe} objects}
}
\value{
\code{pipeline} list containing:
\item{name}{character value}
\item{path}{Location of source pipeline XML file}
\item{description}{character value}
\item{components}{list of \code{module}s and \code{pipeline}s}
\item{pipes}{list of \code{pipe}s}
}
\description{
This functions create a new \code{pipeline} object.
}
\details{
If \code{components} is empty the \code{modules} and
\code{pipelines} arguments will be used to create the pipeline.

\code{path} is used to set the search path(s) for children of this
pipeline. It is not required, but is useful if you are using a specific
directory for providing source and data files to your pipeline. This
slot is auto-filled when a pipeline is loaded from XML using
\code{loadPipeline}.
}
\examples{
## create some modules
mod1 <- module(name = "setX", platform = "R",
               description = "sets the value of x",
               outputs = list(moduleOutput(name = "x", type = "internal",
					   format = "R character string")),
               sources = list(moduleSource(value = "x <- \\"set\\"")))
mod2 <- module("showY", platform = "R",
               description = "displays the value of Y",
               inputs = list(moduleInput(name = "y", type = "internal",
                                         format = "R character string")),
               sources = list(moduleSource(value = "print(y)")))
## create a pipe
pipe1 <- pipe("setX", "x",
              "showY", "y")
## create a pipeline
pline1 <- pipeline(name = "ex_pipeline",
                   modules = list(mod1, mod2),
                   pipes = list(pipe1))
}
\seealso{
\code{loadPipeline} for loading a pipeline from an XML souce,
\code{module} for information on module objects, \code{runPipeline} for
executing all of a pipeline's components, \code{runComponent} for executing
individual components, \code{pipe} for pipes, and \code{addPipe} and
\code{addComponent} for modifying pipelines.
}

