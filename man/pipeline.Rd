% Generated by roxygen2 (5.0.1): do not edit by hand
% Please edit documentation in R/pipeline.R
\name{pipeline}
\alias{pipeline}
\title{Create a pipeline}
\usage{
pipeline(name, description = NULL, components = list(), pipes = list())
}
\arguments{
\item{name}{\code{pipeline} name}

\item{description}{\code{pipeline} description}

\item{components}{list of \code{module} and \code{pipeline} objects}

\item{pipes}{list of \code{pipe} objects}
}
\value{
\code{pipeline} list containing:
\item{name}{character value}
\item{description}{character value}
\item{components}{list of \code{module}s and \code{pipeline}s}
\item{pipes}{list of \code{pipe}s}
}
\description{
This functions create a new \code{pipeline} object.
}
\examples{
## create some modules
mod1 <- module(name = "setX", language = "R",
               description = "sets the value of x",
               outputs = list(
                   moduleOutput(
                       name = "x",
                       vessel = internalVessel("x"),
                       format = ioFormat("R character string"))),
               sources = list(
                   moduleSource(
                       vessel = scriptVessel("x <- \\"set\\""))))
mod2 <- module("showY", language = "R",
               description = "displays the value of Y",
               inputs = list(
                   moduleInput(
                       name = "y",
                       vessel = internalVessel("y"),
                       format = ioFormat("R character string"))),
               sources = list(
                   moduleSource(
                       vessel = scriptVessel("print(y)"))))
pline1 <- pipeline(name = "trivialpipeline", components = list(mod1, mod2))
## create a pipe
pipe1 <- pipe("setX", "x",
              "showY", "y")
## create a pipeline
pline1 <- pipeline(name = "ex_pipeline",
                   components = list(mod1, mod2),
                   pipes = list(pipe1))
}
\seealso{
\code{loadPipeline} for loading a pipeline from an XML
    souce, \code{module} for information on module objects,
    \code{runPipeline} for executing all of a pipeline's
    components, \code{runModule} for executing individual
    \code{module} objects, \code{pipe} for pipes, and
    \code{addPipe} and \code{addComponent} for modifying pipelines.
}

