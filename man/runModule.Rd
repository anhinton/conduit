% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module.R
\name{runModule}
\alias{runModule}
\title{Execute a \code{module}'s source(s)}
\usage{
runModule(module, targetDirectory = getwd(), inputObjects = NULL,
  warnVersion = FALSE)
}
\arguments{
\item{module}{\code{module} object}

\item{targetDirectory}{File path for module output}

\item{inputObjects}{Named list of input objects}

\item{warnVersion}{should conduit warn if module language
version requirements are not met}
}
\value{
\code{moduleResult}
}
\description{
Execute the scripts contained in or referenced by a \code{module}'s
sources.
}
\details{
This function:
\itemize{
  \item creates a directory for the \code{module}'s outputs
  \item determines which language the module script requires
  \item executes the \code{module}'s source(s) using this language
}

If the \code{module} has inputs the \code{inputObjects} list must
have a named absolute file location for each input which is not
resolveable based on only the input provided.

\code{targetDirectory} must exist or the function will return an error.

This function creates a directory named for the module in the
\code{targetDirectory} if it does not already exist. Outputs
generated by the module source scripts are stored in this
directory. A module XML file which will provide the original
module's output is also created in this directory.

If \code{module$host} is not NULL the remote host must exist and be
accessible by conduit or this function will fail.

If \code{warnVersion} is \code{TRUE} this function will give a
warning when the executing language does not meet the module's
\code{moduleLanguage} requirments.
}
\examples{

## run a module with no inputs
mod1xml <- system.file("extdata", "simpleGraph", "createGraph.xml", 
		       package = "conduit")
mod1 <- loadModule("createGraph", 
		      ref = mod1xml)
result1 <- runModule(module = mod1, targetDirectory = tempdir())

## run a module with inputs
mod2xml <- system.file("extdata", "simpleGraph", "layoutGraph.xml",
		          package = "conduit")
mod2 <- loadModule("layoutGraph", ref = mod2xml)

## mod2 input names
names(mod2$inputs)
mod2inputs <- lapply(result1$outputList, getRef)
names(mod2inputs) <- names(mod2$inputs)

runModule(module = mod2, inputObjects = mod2inputs,
          targetDirectory = tempdir())

}
\seealso{
\code{module}, \code{moduleSource}, \code{moduleLanguage}
    for creating modules, \code{moduleResult} for result objects
}

