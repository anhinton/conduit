% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeline.R
\name{runPipeline}
\alias{runPipeline}
\title{Run a pipeline}
\usage{
runPipeline(pipeline, targetDirectory = getwd())
}
\arguments{
\item{pipeline}{A \code{pipeline} object}

\item{targetDirectory}{File path for pipeline output}
}
\value{
Named list of \code{output} objects
}
\description{
Executes a \code{pipeline}'s \code{component}s.
}
\details{
This function creates a directory named for
    \code{pipeline}, in a directory called \file{pipelines}, in the
    \code{targetDirectory}
    (\file{targetDirectory/pipelines/$NAME$}). If the directory
    \file{pipelines} does not exist in \code{targetDirectory} it
    will be created. Working files and output from the pipeline's
    \code{component}s will be stored in the named directory.
}
\examples{
simpleGraph <-
    loadPipeline(name = "simpleGraph",
                 ref = system.file("extdata", "simpleGraph",
                                   "pipeline.xml",
                                    package = "conduit"))

## run the pipeline
runPipeline(simpleGraph, targetDirectory = tempdir())

## python language example
pythonExample <- loadPipeline("pythonExample",
                              system.file("extdata", "pythonExample",
                                          "pipeline.xml", package="conduit"))
runPipeline(pythonExample, targetDirectory = tempdir())

## shell language example
shellExample <- loadPipeline("shellExample",
                             system.file("extdata", "shellExample",
                                         "pipeline.xml", package="conduit"))
runPipeline(shellExample, targetDirectory = tempdir())

## A pipeline with a module run on a remote host
\dontrun{
  irisplots_host_pipeline <- loadPipeline(
      "irisplots_host_pipeline",
      system.file("extdata", "irisplots_host", "pipeline.xml",
      package = "conduit"))
  runPipeline(irisplots_host_pipeline, targetDirectory = tempdir())
}

}
\seealso{
More about \code{pipeline} objects, run single \code{module}
objects with \code{runModule}.
}

